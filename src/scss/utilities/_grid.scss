@use "sass:math";
@use "breakpoints" as bp;

$grid-columns: 12 !default;
$grid-gutter-width: 24px !default;
$grid-row-columns: 6 !default;

.container {
  width: 100%;
  padding-right: math.div($grid-gutter-width, 2);
  padding-left: math.div($grid-gutter-width, 2);
  margin-right: auto;
  margin-left: auto;
  
  @include bp.media-breakpoint-up(sm) {
    max-width: 540px;
  }
  
  @include bp.media-breakpoint-up(md) {
    max-width: 720px;
  }
  
  @include bp.media-breakpoint-up(lg) {
    max-width: 960px;
  }
  
  @include bp.media-breakpoint-up(xl) {
    max-width: 1140px;
  }
  
  @include bp.media-breakpoint-up(xxl) {
    max-width: 1320px;
  }
}

.container-fluid {
  width: 100%;
  padding-right: math.div($grid-gutter-width, 2);
  padding-left: math.div($grid-gutter-width, 2);
  margin-right: auto;
  margin-left: auto;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div($grid-gutter-width, -2);
  margin-left: math.div($grid-gutter-width, -2);
}

.no-gutters {
  margin-right: 0;
  margin-left: 0;
  
  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

.col {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
  padding-right: math.div($grid-gutter-width, 2);
  padding-left: math.div($grid-gutter-width, 2);
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex: 0 0 math.percentage(math.div($i, $grid-columns));
    max-width: math.percentage(math.div($i, $grid-columns));
    padding-right: math.div($grid-gutter-width, 2);
    padding-left: math.div($grid-gutter-width, 2);
  }
}

@for $i from 0 through ($grid-columns - 1) {
  .offset-#{$i} {
    margin-left: if($i > 0, math.percentage(math.div($i, $grid-columns)), 0);
  }
}

@each $breakpoint-name, $breakpoint-value in bp.$breakpoints {
  @if $breakpoint-name != "xs" {
    @include bp.media-breakpoint-up($breakpoint-name) {
      .col-#{$breakpoint-name} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      
      @for $i from 1 through $grid-columns {
        .col-#{$breakpoint-name}-#{$i} {
          flex: 0 0 math.percentage(math.div($i, $grid-columns));
          max-width: math.percentage(math.div($i, $grid-columns));
        }
      }
      
      @for $i from 0 through ($grid-columns - 1) {
        .offset-#{$breakpoint-name}-#{$i} {
          margin-left: if($i > 0, math.percentage(math.div($i, $grid-columns)), 0);
        }
      }
    }
  }
}

.order-first { order: -1; }
.order-last { order: $grid-columns + 1; }

@for $i from 0 through $grid-columns {
  .order-#{$i} { order: $i; }
}

@each $breakpoint-name, $breakpoint-value in bp.$breakpoints {
  @if $breakpoint-name != "xs" {
    @include bp.media-breakpoint-up($breakpoint-name) {
      .order-#{$breakpoint-name}-first { order: -1; }
      .order-#{$breakpoint-name}-last { order: $grid-columns + 1; }
      
      @for $i from 0 through $grid-columns {
        .order-#{$breakpoint-name}-#{$i} { order: $i; }
      }
    }
  }
}

.d-none { display: none !important; }
.d-inline { display: inline !important; }
.d-inline-block { display: inline-block !important; }
.d-block { display: block !important; }
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }

@each $breakpoint-name, $breakpoint-value in bp.$breakpoints {
  @if $breakpoint-name != "xs" {
    @include bp.media-breakpoint-up($breakpoint-name) {
      .d-#{$breakpoint-name}-none { display: none !important; }
      .d-#{$breakpoint-name}-inline { display: inline !important; }
      .d-#{$breakpoint-name}-inline-block { display: inline-block !important; }
      .d-#{$breakpoint-name}-block { display: block !important; }
      .d-#{$breakpoint-name}-flex { display: flex !important; }
      .d-#{$breakpoint-name}-inline-flex { display: inline-flex !important; }
    }
  }
}